import { Container } from 'inversify';
import { createStore, getState, getStore, isStoreExist, setStoreDevTool, Store, StoreDevTool } from '@sardonyxwt/state-store';
import { createEventBus, getEventBus, isEventBusExist, setEventBusDevTool, EventBusDevTool, EventBus } from '@sardonyxwt/event-bus';
import { Context } from './context';
import { Module, ModuleStore } from './store/module.store';
import { Resource, ResourceStore } from './store/resource.store';
import { InternationalizationStore, TranslateUnit } from './store/internationalization.store';
import { Config, ConfigStore } from './store/config.store';
import { JSXService } from './service/jsx.service';
import { ResourceLoader, ResourceService } from './service/resource.service';
import { InternationalizationService, TranslateUnitLoader } from './service/internationalization.service';
import { ConfigService, ConfigLoader } from './service/config.service';
import { ModuleLoader, ModuleService } from './service/module.service';
import { RepositoryService } from './service/repository.service';
import { useData } from './hook/data.hook';
import { useId } from './hook/id.hook';
import { useRef } from './hook/ref.hook';
import { createStateHook } from './hook/state.hook';
import { createModuleHook } from './hook/module.hook';
import { createResourceHook } from './hook/resource.hook';
import { createDependenciesHook, createDependencyHook } from './hook/dependency.hook';
import { createI18nHook, createTranslatorHook } from './hook/internationalization.hook';
import { createConfigHook } from './hook/config.hook';
export * from '@sardonyxwt/event-bus';
export * from '@sardonyxwt/state-store';
export * from './types';
export * from './context';
export * from './store/module.store';
export * from './store/resource.store';
export * from './store/internationalization.store';
export * from './store/config.store';
export * from './service/jsx.service';
export * from './service/internationalization.service';
export * from './service/config.service';
export * from './service/resource.service';
export * from './service/module.service';
export * from './service/repository.service';
export * from './hook/data.hook';
export * from './hook/id.hook';
export * from './hook/ref.hook';
export * from './hook/state.hook';
export * from './hook/dependency.hook';
export * from './hook/internationalization.hook';
export * from './hook/config.hook';
export * from './hook/module.hook';
export * from './hook/resource.hook';
export interface LiguiConfig {
    name: string;
    container?: Container;
    modules?: Module[];
    resources?: Resource[];
    configs?: Config[];
    locales?: string[];
    currentLocale?: string;
    defaultLocale?: string;
    translateUnits?: TranslateUnit[];
    moduleLoaders?: ModuleLoader[];
    resourceLoaders?: ResourceLoader[];
    internationalizationLoaders?: TranslateUnitLoader[];
    configLoaders?: ConfigLoader[];
}
export interface Ligui {
    readonly jsx: JSXService;
    readonly resource: {
        store: ResourceStore;
        service: ResourceService;
    };
    readonly internationalization: {
        store: InternationalizationStore;
        service: InternationalizationService;
    };
    readonly config: {
        store: ConfigStore;
        service: ConfigService;
    };
    readonly module: {
        store: ModuleStore;
        service: ModuleService;
    };
    readonly repository: RepositoryService;
    readonly context: Context;
    readonly store: Store;
    readonly eventBus: EventBus;
    readonly container: Container;
    createStore: typeof createStore;
    isStoreExist: typeof isStoreExist;
    getStore: typeof getStore;
    getState: typeof getState;
    setStoreDevTool: typeof setStoreDevTool;
    createEventBus: typeof createEventBus;
    isEventBusExist: typeof isEventBusExist;
    getEventBus: typeof getEventBus;
    setEventBusDevTool: typeof setEventBusDevTool;
    useId: typeof useId;
    useRef: typeof useRef;
    useData: typeof useData;
    useState: ReturnType<typeof createStateHook>;
    useDependency: ReturnType<typeof createDependencyHook>;
    useDependencies: ReturnType<typeof createDependenciesHook>;
    useModule: ReturnType<typeof createModuleHook>;
    useResource: ReturnType<typeof createResourceHook>;
    useI18n: ReturnType<typeof createI18nHook>;
    useTranslator: ReturnType<typeof createTranslatorHook>;
    useConfig: ReturnType<typeof createConfigHook>;
}
export declare function createNewLiguiInstance(config: LiguiConfig): Ligui;
export declare const defaultStoreDevTool: Partial<StoreDevTool>;
export declare const defaultEventBusDevTool: Partial<EventBusDevTool>;
//# sourceMappingURL=ligui.d.ts.map